import os
import uuid
from typing import Any, List, Iterable
from dotenv import load_dotenv

# Required:
# pip install -U langchain-azure-ai mem0 langchain-openai azure-cosmos azure-identity

from langchain_azure_ai.vectorstores import AzureCosmosDBNoSqlVectorSearch
from mem0 import Memory
from langchain_openai import AzureChatOpenAI, AzureOpenAIEmbeddings
from azure.cosmos import CosmosClient
from azure.identity import DefaultAzureCredential
from langchain_core.documents import Document

# --- Load environment ---
load_dotenv()

# --- Config variables ---
azure_openai_api_key = os.getenv("AZURE_OPENAI_API_KEY")
azure_openai_endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
azure_openai_api_version = os.getenv("AZURE_OPENAI_API_VERSION")
azure_openai_deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")
azure_openai_embedding_deployment_name = os.getenv("AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME")
cosmosdb_endpoint = os.getenv("AZURE_COSMOSDB_ENDPOINT")
cosmosdb_database_name = os.getenv("AZURE_COSMOSDB_DATABASE_NAME")
cosmosdb_container_name = "mem0"
EMBEDDING_DIMENSIONS = 1536

# --- Wrapper Class ---
class CosmosDBMem0Wrapper(AzureCosmosDBNoSqlVectorSearch):
    """
    A wrapper to add detailed debugging and ensure compatibility with mem0.
    """
    def add_texts(
        self,
        texts: Iterable[str],
        metadatas: List[dict] | None = None,
        **kwargs: Any,
    ) -> List[str]:
        """
        Overrides add_texts to inject required metadata fields for mem0 and add debug prints.
        """
        print("\n[Wrapper.add_texts] Intercepted call to add texts...")
        if not metadatas:
            metadatas = [{} for _ in texts]

        # FIX: The parent's add_texts will use the `text_key` we provide at initialization
        # to handle the text. We just need to ensure the metadata has the ID.
        # mem0 relies on getting the original text back, which we store in the 'data' field.
        for metadata, text in zip(metadatas, texts):
            if "id" not in metadata:
                metadata["id"] = str(uuid.uuid4())
            metadata["data"] = text # mem0 needs this field to reconstruct the memory

        print(f"[Wrapper.add_texts] Handing off {len(list(texts))} documents to parent method.")
        try:
            # Call the original, working add_texts method from the parent class
            added_ids = super().add_texts(texts=texts, metadatas=metadatas, **kwargs)
            print(f"[Wrapper.add_texts] Successfully added documents. IDs: {added_ids}")
            return added_ids
        except Exception as e:
            print(f"[Wrapper.add_texts] ERROR in parent add_texts: {e}")
            import traceback
            print(traceback.format_exc())
            return []

    def similarity_search_by_vector(
        self, embedding: List[float], k: int = 10, **kwargs: Any
    ) -> List[Document]:
        """
        Overrides similarity_search to add detailed debugging.
        Instead of recreating the query logic, we call the parent's reliable method.
        """
        print(f"\n[Wrapper.similarity_search] Intercepted vector search with k={k}...")
        try:
            # FIX: Call the parent's search method that returns documents and scores
            results_with_scores = super().similarity_search_with_score_by_vector(
                embedding=embedding, k=k, **kwargs
            )
            print(f"[Wrapper.similarity_search] Parent method returned {len(results_with_scores)} results.")

            # Process results for debugging and return the documents
            final_documents = []
            for doc, score in results_with_scores:
                doc.metadata["score"] = score
                final_documents.append(doc)
                print(f"  - Match (Score: {score:.4f}): {doc.page_content[:80]}...")
            
            return final_documents
        except Exception as e:
            print(f"[Wrapper.similarity_search] ERROR in parent search: {str(e)}")
            import traceback
            print(traceback.format_exc())
            return []


# --- Initialize services ---
print("Initializing clients...")

embedder = AzureOpenAIEmbeddings(
    azure_deployment=azure_openai_embedding_deployment_name,
    openai_api_version=azure_openai_api_version,
    azure_endpoint=azure_openai_endpoint,
    api_key=azure_openai_api_key
)

llm = AzureChatOpenAI(
    azure_deployment=azure_openai_deployment_name,
    api_version=azure_openai_api_version,
    azure_endpoint=azure_openai_endpoint,
    api_key=azure_openai_api_key,
)

credential = DefaultAzureCredential()
cosmos_client = CosmosClient(url=cosmosdb_endpoint, credential=credential)

vector_embedding_policy = {
    "vectorEmbeddings": [
        {"path": "/vectorContent", "dataType": "float32", "dimensions": EMBEDDING_DIMENSIONS, "distanceFunction": "cosine"},
    ]
}

indexing_policy = {
    "includedPaths": [{"path": "/*"}],
    "excludedPaths": [{"path": '/"_etag"/?'}],
    "vectorIndexes": [{"path": "/vectorContent", "type": "quantizedFlat"}],
}

# --- Vector store ---
print("Initializing Azure Cosmos DB for NoSQL Vector Store...")

# FIX: Correctly initialize the vector store with direct keyword arguments.
# Do NOT use a `vector_search_fields` dictionary.
vector_store = CosmosDBMem0Wrapper(
    cosmos_client=cosmos_client,
    database_name=cosmosdb_database_name,
    container_name=cosmosdb_container_name,
    embedding=embedder,
    vector_embedding_policy=vector_embedding_policy,
    indexing_policy=indexing_policy,
    cosmos_container_properties={"partition_key": {"paths": ["/id"], "kind": "Hash"}},
    cosmos_database_properties={},
    vector_search_fields={
        "text_field": "text",
        "embedding_field": "vectorContent",
        "metadata_field": "metadata",
    }
)

print("Vector store initialized successfully.")

# --- Mem0 Config ---
config = {
    "vector_store": {
        "provider": "langchain",
        "config": {"client": vector_store},
    },
    "llm": {
        "provider": "langchain",
        "config": {"model": llm},
    },
    "embedder": {
        "provider": "langchain",
        "config": {"model": embedder},
    },
}

# --- Mem0 Setup ---
print("\nInitializing Mem0 from config...")
m = Memory.from_config(config)
print("Mem0 initialized.")

# --- Input Messages ---
messages = [
    {"role": "user", "content": "My favorite movies are The Matrix and Inception"},
    {"role": "assistant", "content": "Great choices!"},
    {"role": "user", "content": "I also love Blade Runner 2049"},
    {"role": "assistant", "content": "A modern classic!"}
]

# --- Add Memories ---
print("\n--- ADDING MEMORIES ---")
result = m.add(messages, user_id="alice", metadata={"category": "movies"})
print("\n[Result] Added memories:", result)

# --- Mem0 Search ---
print("\n--- SEARCHING MEMORIES ---")
search_results = m.search("What movies does the user like?", user_id="alice")
print("\n[Result] Search results:", search_results)

# --- Direct Vector Search Debug ---
print("\n[Debug] Running comprehensive vector search test:")

# Test direct document retrieval
print("\n1. Testing direct document retrieval:")
try:
    container = vector_store._container
    print(f"[Debug] Using container: {container.id}")
    results = container.query_items(
        query="SELECT * FROM c",
        enable_scan_in_query=True,
        parameters=[],
    )
    docs = list(results)
    print(f"Found {len(docs)} total documents in collection")
    for doc in docs:
        print(f"Document: ID={doc.get('id')}, Text={doc.get('text', '')[:50]}...")
        content = (
            doc.get("text", "") or 
            doc.get("page_content", "") or 
            doc.get("content", "") or 
            doc.get("data", "")
        )
        print(f"Document: ID={doc.get('id')}, Text={content[:50]}...")
except Exception as e:
    print(f"Error in direct retrieval: {str(e)}")
    import traceback
    print(f"Full error: {traceback.format_exc()}")
